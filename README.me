Документация кода




Файл TB.py:

Модули:

telebot: Библиотека для работы с Telegram Bot API.
requests: Библиотека для выполнения HTTP-запросов.
datetime: Библиотека для работы с датой и временем.
Переменные:

bot: Экземпляр класса TeleBot для работы с Telegram Bot API.
status: Глобальная переменная, хранящая текущий статус взаимодействия с пользователем:
0: Ожидание команды пользователя.
1: Запрос ID документа.
2: Запрос тегов для документа.
3: Запрос текста документа.
new_id: Глобальная переменная, в которой хранится ID нового документа.
new_tags: Глобальная переменная, в которой хранятся теги нового документа.
Функции:

start_message(message):
Обработчик команды /start.
Отправляет приветственное сообщение и клавиатуру с кнопкой "Добавить документ в БЗ".
end_message(message):
Обработчик команды /stop.
Отправляет сообщение "Пока" и останавливает работу бота.
message_reply(message):
Обработчик любых текстовых сообщений.
В зависимости от текущего статуса выполняет различные действия:
status == 1: Сохраняет введённый id документа в переменную new_id, запрашивает теги и переходит в status 2.
status == 2: Сохраняет введённые теги в переменную new_tags, запрашивает документ и переходит в status 3.
status == 3: Формирует JSON-объект с id, тегами и текстом документа, отправляет POST-запрос на сервер http://127.0.0.1:8000/add_doc, сообщает о сохранении документа и переходит в status 0.
message.text == "Добавить документ в БЗ": Устанавливает статус в 1 и запрашивает id документа.
message.text == "Отмена": Сбрасывает статус в 0 и сообщает о готовности принимать вопросы.
status == 0: Отправляет GET-запрос на сервер http://127.0.0.1:8000/find_doc с текстом сообщения, получает ответ и отправляет его пользователю.
Запуск бота:

В конце кода вызывается функция bot.infinity_polling(), которая запускает бота в бесконечном режиме ожидания новых сообщений.




Файл main.py:

Модули:

FastAPI: Библиотека для создания REST API на Python.
elasticsearch: Библиотека для работы с Elasticsearch.
pydantic: Библиотека для валидации данных.
openai: Библиотека для работы с OpenAI API.
Модели данных:

Doc: Модель данных для документа, содержащая ID и текст документа.
Searcher: Модель данных для поиска, содержащая текстовый запрос пользователя.
Переменные:

client: Экземпляр класса Elasticsearch, подключенный к локальному серверу Elasticsearch.
lm_client: Экземпляр класса OpenAI, подключенный к локальному серверу OpenAI API.
API-эндпоинты:

/find_doc: GET-эндпоинт для поиска документа по запросу пользователя.
Запрос: Объект типа Searcher, содержащий текстовый запрос пользователя.
Ответ: Сгенерированный ответ на основе найденных документов.
/add_doc: POST-эндпоинт для добавления документа в Elasticsearch.
Запрос: Объект типа Doc, содержащий информацию о документе.
Ответ: Подтверждение добавления документа.
Функции:

find_doc(promt: Searcher):
Выполняет поиск документа в Elasticsearch по запросу пользователя.
Использует LM Studio для генерации ответа на основе найденных документов.
Возвращает сгенерированный ответ.

add_doc(doc: Doc):
Добавляет документ в индекс "my_index" Elasticsearch.
Возвращает подтверждение добавления документа.
Запуск приложения:

Пример использования:

1. Запуск бота:

Сохраните файлы TB.py и main.py в одном каталоге.
Запустите сервер Elasticsearch: elasticsearch -d.
Запустите сервер LM Studio: python -m lm_studio.
Запустите бота: python TB.py.
Запустите API через uvicorn.

2. Добавление документа:

Отправьте боту команду /start и нажмите кнопку "Добавить документ в БЗ".
Введите ID документа.
Введите теги для документа.
Введите текст документа.
Бот сообщит о сохранении документа.
3. Поиск документа:

Отправьте боту текстовое сообщение с вашим запросом.
Бот отправит вам ответ на основе найденных документов.
Примечания:

Для работы бота необходимо, чтобы серверы Elasticsearch и LM Studio были запущены.
Вы можете изменить параметры API-эндпоинтов и функций в соответствии с вашими потребностями.
Не забудьте внести свои адреса для LM сервера и Elasticsearch.

Я надеюсь, эта документация поможет вам понять код и использовать его в своих целях.

Если у вас есть какие-либо вопросы, пожалуйста, не стесняйтесь их задавать.
